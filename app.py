import streamlit as st 
from pathlib import Path
import google.generativeai as genai
from api_key import api_key

# Configure the API key
genai.configure(api_key=api_key)

# Create the model configuration
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "text/plain",
}

# Apply safety settings
safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
]

systems_prompt= """
You are a medical image analysis assistant. Your task is to provide informative and objective analysis of medical images. Focus on identifying potential abnormalities or relevant findings. Avoid making diagnoses or recommending treatments.

For example, 

1. Detailed Medical Analysis: Provide an in-depth analysis of the medical image, identifying key features, abnormalities, and relevant clinical details.
2. Findings Reports: Summarize the findings from your analysis in bullet points. Ensure that the findings are clear, concise, and medically relevant.
3. Recommended Next Steps: Based on your analysis, recommend the next steps that should be taken. These could include further diagnostic tests, specialist consultations, or immediate clinical actions.
4. Treatment Suggestions: Offer potential treatment suggestions based on the identified findings. These should be aligned with current medical guidelines and best practices.
5. Disclaimer: Include a disclaimer stating that the analysis and suggestions provided are generated by an AI model and should be validated by a qualified medical professional before any clinical decisions are made.
"""

# Configure the Generative Model
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
    safety_settings=safety_settings,
)

# Set page configuration for Streamlit
st.set_page_config(page_title="VitalImage Analytics", page_icon=':robot')

# App title and subtitle
st.title("VitalImage Analytics")
st.subheader("An application that can help give medical advice based on image provided")

# File uploader for medical images
uploaded_file = st.file_uploader("Upload a medical image for analysis", type=["png", "jpeg", "jpg"])

# Submit button for generating analysis
submit_button = st.button("Generate Analysis")

if submit_button and uploaded_file:
    # Read the image data
    image_data = uploaded_file.getvalue()

    # Create the prompt for the model
    prompt_parts = [
        {
            "mime_type": "image/jpg",  
            "data": image_data
        },
        {
            "text": systems_prompt
        }
    ]

    # Generate a response based on prompt and image
    response = model.generate_content({"parts": prompt_parts})

    # Display the generated analysis
    st.write(response.text)
else:
    st.write("Please upload an image and click the 'Generate Analysis' button.")
